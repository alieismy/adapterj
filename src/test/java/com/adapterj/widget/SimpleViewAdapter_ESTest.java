/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 27 15:13:08 GMT 2019
 */

package com.adapterj.widget;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.adapterj.widget.SelectOptions;
import com.adapterj.widget.SimpleSelectOptions;
import com.adapterj.widget.SimpleViewAdapter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleViewAdapter_ESTest extends SimpleViewAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleViewAdapter<String> simpleViewAdapter0 = new SimpleViewAdapter<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "-PF,n#_jw");
      // Undeclared exception!
      try { 
        simpleViewAdapter0.putSelectOptions(", new ADAPTERJ.widget.SimpleSelectOptions(_optionsId", (Map<String, String>) hashMap0, "A`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal options: value is \"\"
         //
         verifyException("com.adapterj.widget.AbstractSelectOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SimpleViewAdapter<String> simpleViewAdapter0 = new SimpleViewAdapter<String>();
      hashMap0.put((String) null, "=^LCJQwC.Ev!=Ax#pS]");
      // Undeclared exception!
      try { 
        simpleViewAdapter0.putSelectOptions("=^LCJQwC.Ev!=Ax#pS]", (Map<String, String>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal options: value is \"\"
         //
         verifyException("com.adapterj.widget.AbstractSelectOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleViewAdapter<Object> simpleViewAdapter0 = new SimpleViewAdapter<Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "e");
      SimpleSelectOptions simpleSelectOptions0 = new SimpleSelectOptions("e", hashMap0, integer0);
      simpleViewAdapter0.putSelectOptions("e", (SelectOptions) simpleSelectOptions0);
      // Undeclared exception!
      try { 
        simpleViewAdapter0.toJavaScript("{\"0\":\"e\"}", "com.google.gson.JsonParseException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.adapterj.widget.SimpleViewAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleViewAdapter<Integer> simpleViewAdapter0 = new SimpleViewAdapter<Integer>();
      boolean boolean0 = simpleViewAdapter0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleViewAdapter<Integer> simpleViewAdapter0 = new SimpleViewAdapter<Integer>();
      Integer integer0 = new Integer(0);
      simpleViewAdapter0.setData(integer0);
      boolean boolean0 = simpleViewAdapter0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleViewAdapter<SimpleSelectOptions> simpleViewAdapter0 = new SimpleViewAdapter<SimpleSelectOptions>();
      simpleViewAdapter0.putSelectOptions((String) null, (List<String>) null, 1276);
      assertNull(simpleViewAdapter0.toJSONString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleViewAdapter<SimpleSelectOptions> simpleViewAdapter0 = new SimpleViewAdapter<SimpleSelectOptions>();
      simpleViewAdapter0.putSelectOptions("", (List<String>) null, 34);
      assertNull(simpleViewAdapter0.toXMLString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleViewAdapter<String> simpleViewAdapter0 = new SimpleViewAdapter<String>();
      simpleViewAdapter0.putSelectOptions((String) null, (List<String>) null);
      assertTrue(simpleViewAdapter0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleViewAdapter<Integer> simpleViewAdapter0 = new SimpleViewAdapter<Integer>();
      simpleViewAdapter0.putSelectOptions("", (List<String>) null);
      assertNull(simpleViewAdapter0.toXMLString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleViewAdapter<Object> simpleViewAdapter0 = new SimpleViewAdapter<Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(" at line ", " KIjjE68Rd7$oQK7aOm");
      simpleViewAdapter0.putSelectOptions("", (Map<String, String>) hashMap0, "");
      assertTrue(simpleViewAdapter0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(810);
      hashMap0.put(integer0, "N/A");
      SimpleSelectOptions simpleSelectOptions0 = new SimpleSelectOptions("", hashMap0, integer0);
      Map<String, String> map0 = simpleSelectOptions0._options;
      SimpleViewAdapter<String> simpleViewAdapter0 = new SimpleViewAdapter<String>();
      simpleViewAdapter0.putSelectOptions("X0}V ,dt", map0, (String) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleViewAdapter<String> simpleViewAdapter0 = new SimpleViewAdapter<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("T>8*{Iam`8&Cz}Rj", "1x/Y 3&vzAWEi@Z[");
      simpleViewAdapter0.putSelectOptions("Q~", (Map<String, String>) hashMap0, "Q~");
      assertTrue(simpleViewAdapter0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleViewAdapter<Integer> simpleViewAdapter0 = new SimpleViewAdapter<Integer>();
      simpleViewAdapter0.putSelectOptions("var _length = _anchors.length;", (Map<String, String>) null, "var _length = _anchors.length;");
      assertEquals("", simpleViewAdapter0.getPlaceholderForEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleViewAdapter<Object> simpleViewAdapter0 = new SimpleViewAdapter<Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      SimpleSelectOptions simpleSelectOptions0 = new SimpleSelectOptions("e", hashMap0, integer0);
      Map<String, String> map0 = simpleSelectOptions0._options;
      simpleViewAdapter0.putSelectOptions((String) null, map0, "");
      assertEquals("", simpleViewAdapter0.getPlaceholderForNull());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleViewAdapter<String> simpleViewAdapter0 = new SimpleViewAdapter<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      simpleViewAdapter0.putSelectOptions("Q~", (Map<String, String>) hashMap0, "Q~");
      assertNull(simpleViewAdapter0.toJSONString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleViewAdapter<String> simpleViewAdapter0 = new SimpleViewAdapter<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      simpleViewAdapter0.putSelectOptions("-PF,n#_jw", (Map<String, String>) hashMap0);
      assertTrue(simpleViewAdapter0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleViewAdapter<Object> simpleViewAdapter0 = new SimpleViewAdapter<Object>();
      simpleViewAdapter0.putSelectOptions("", (Map<String, String>) null);
      assertTrue(simpleViewAdapter0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SimpleViewAdapter<String> simpleViewAdapter0 = new SimpleViewAdapter<String>();
      simpleViewAdapter0.putSelectOptions((String) null, (Map<String, String>) hashMap0);
      assertNull(simpleViewAdapter0.toXMLString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SimpleViewAdapter<Object> simpleViewAdapter0 = new SimpleViewAdapter<Object>();
      SimpleViewAdapter<SimpleSelectOptions> simpleViewAdapter1 = new SimpleViewAdapter<SimpleSelectOptions>();
      hashMap0.put("N/A", "=kA`Q+F@Q");
      simpleViewAdapter1.putSelectOptions("", (Map<String, String>) hashMap0);
      SelectOptions selectOptions0 = simpleViewAdapter1.getSelectOptions("");
      simpleViewAdapter0.putSelectOptions("nHE", selectOptions0);
      assertNull(simpleViewAdapter0.toJSONString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleViewAdapter<Integer> simpleViewAdapter0 = new SimpleViewAdapter<Integer>();
      simpleViewAdapter0.putSelectOptions("", (SelectOptions) null);
      assertEquals("", simpleViewAdapter0.getPlaceholderForEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleViewAdapter<Object> simpleViewAdapter0 = new SimpleViewAdapter<Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SimpleSelectOptions simpleSelectOptions0 = new SimpleSelectOptions("=^LCJQwC.Ev!=Ax#pS]", hashMap0);
      simpleViewAdapter0.putSelectOptions((String) null, (SelectOptions) simpleSelectOptions0);
      assertEquals("", simpleViewAdapter0.getPlaceholderForEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SimpleSelectOptions simpleSelectOptions0 = new SimpleSelectOptions("7Ds\"Z", hashMap0);
      SimpleViewAdapter<Object> simpleViewAdapter0 = new SimpleViewAdapter<Object>();
      simpleViewAdapter0.putSelectOptions("7Ds\"Z", (SelectOptions) simpleSelectOptions0);
      assertTrue(simpleViewAdapter0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleViewAdapter<Integer> simpleViewAdapter0 = new SimpleViewAdapter<Integer>();
      String string0 = simpleViewAdapter0.toJSONString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleViewAdapter<Object> simpleViewAdapter0 = new SimpleViewAdapter<Object>();
      Set<String> set0 = simpleViewAdapter0.idSetOfSelectOptions();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleViewAdapter<Object> simpleViewAdapter0 = new SimpleViewAdapter<Object>();
      String string0 = simpleViewAdapter0.toXMLString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleViewAdapter<SimpleSelectOptions> simpleViewAdapter0 = new SimpleViewAdapter<SimpleSelectOptions>();
      SelectOptions selectOptions0 = simpleViewAdapter0.getSelectOptions("");
      assertNull(selectOptions0);
  }
}

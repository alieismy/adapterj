/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 27 16:01:19 GMT 2019
 */

package com.adapterj.ext.vertx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.adapterj.ext.vertx.SimpleHttpParametersResolver;
import com.adapterj.registry.SimpleRegistry;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.LongSerializationPolicy;
import io.vertx.core.http.HttpServerRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleHttpParametersResolver_ESTest extends SimpleHttpParametersResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleRegistry simpleRegistry0 = new SimpleRegistry();
      SimpleHttpParametersResolver<MockThaiBuddhistDate> simpleHttpParametersResolver0 = new SimpleHttpParametersResolver<MockThaiBuddhistDate>(simpleRegistry0);
      String string0 = simpleHttpParametersResolver0.getClassIdFromInstanceId("io.vertx.core.net.impl.TrustAllTrustManager");
      assertNotNull(string0);
      assertEquals("io.vertx.core.net.impl.TrustAllTrustManager", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleRegistry simpleRegistry0 = new SimpleRegistry();
      SimpleHttpParametersResolver<MockJapaneseDate> simpleHttpParametersResolver0 = new SimpleHttpParametersResolver<MockJapaneseDate>(simpleRegistry0);
      String string0 = simpleHttpParametersResolver0.getAttributeIdFromParameterName("@fbaMrB%9`7U \"Y;`J");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleRegistry simpleRegistry0 = new SimpleRegistry();
      SimpleHttpParametersResolver<FieldNamingPolicy> simpleHttpParametersResolver0 = new SimpleHttpParametersResolver<FieldNamingPolicy>(simpleRegistry0);
      String string0 = simpleHttpParametersResolver0.getClassIdFromInstanceId("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleRegistry simpleRegistry0 = new SimpleRegistry();
      SimpleHttpParametersResolver<MockInetSocketAddress> simpleHttpParametersResolver0 = new SimpleHttpParametersResolver<MockInetSocketAddress>(simpleRegistry0);
      String string0 = simpleHttpParametersResolver0.getClassIdFromParameterName("}");
      assertNotNull(string0);
      assertEquals("}", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleRegistry simpleRegistry0 = new SimpleRegistry();
      SimpleHttpParametersResolver<Integer> simpleHttpParametersResolver0 = new SimpleHttpParametersResolver<Integer>(simpleRegistry0);
      String string0 = simpleHttpParametersResolver0.getInstanceIdFromParameterName("@fbaMrB%9`7U \"Y;`J");
      assertEquals("@fbaMrB%9`7U \"Y;`J", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleRegistry simpleRegistry0 = new SimpleRegistry();
      SimpleHttpParametersResolver<LongSerializationPolicy> simpleHttpParametersResolver0 = new SimpleHttpParametersResolver<LongSerializationPolicy>(simpleRegistry0);
      boolean boolean0 = simpleHttpParametersResolver0.isPlaintextParameter("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleRegistry simpleRegistry0 = new SimpleRegistry();
      SimpleHttpParametersResolver<MockInetSocketAddress> simpleHttpParametersResolver0 = new SimpleHttpParametersResolver<MockInetSocketAddress>(simpleRegistry0);
      // Undeclared exception!
      try { 
        simpleHttpParametersResolver0.getParametersAsMap((HttpServerRequest) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // (SimpleHttpParametersResolver.java:559) getParametersAsMap: The input parameter httpRequest is null. Return a null output parameter
         //
         verifyException("com.adapterj.ext.vertx.SimpleHttpParametersResolver", e);
      }
  }
}

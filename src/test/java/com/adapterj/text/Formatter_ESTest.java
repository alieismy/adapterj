/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 27 15:59:28 GMT 2019
 */

package com.adapterj.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.adapterj.text.Formatter;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Formatter_ESTest extends Formatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Boolean boolean0 = new Boolean("/CW-K|AUTt[k)o");
      Boolean boolean1 = Boolean.FALSE;
      String string0 = formatter0.format(boolean0, boolean1);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = Boolean.valueOf(true);
      String string0 = formatter0.format(boolean0, boolean1);
      assertEquals("FALSE", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(1865.469668, "", "");
      assertEquals("1,865.47", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(0.0, "", "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Double double0 = Double.valueOf("0.00");
      String string0 = formatter0.format(double0, (String) null, "-6,460");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Double double0 = new Double(1043.906844125);
      String string0 = formatter0.format(double0, (String) null, (String) null);
      assertEquals("1,043.91", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(1635.37, "");
      assertEquals("1,635.37", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForDouble("-2,656.64");
      Double double0 = new Double(0);
      String string0 = formatter0.format(double0, (String) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Double double0 = new Double(2570.0347409);
      String string0 = formatter0.format(double0, "");
      assertEquals("2,570.03", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Double double0 = new Double(552.4452373546);
      String string0 = formatter0.format(double0);
      assertEquals("552.45", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Double double0 = new Double(0.0);
      String string0 = formatter0.format(double0);
      assertEquals("0.00", string0); // Updated by York/GuangYu DENG
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(786.44F, (String) null);
      assertEquals("786.44", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Float float0 = new Float((-133.0122F));
      String string0 = formatter0.format(float0, "");
      assertEquals("-133.01", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((-161L), "", "");
      assertEquals("-161", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Long long0 = new Long(1L);
      String string0 = formatter0.format(long0, "'", "MQYL0W@g/tcxh@@;h");
      assertEquals("MQYL0W@g/tcxh@@;h", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((-5255L), "");
      assertEquals("-5255", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForLong("-1,686.86");
      Long long0 = new Long(613566757);
      String string0 = formatter0.format(long0, (String) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForInteger("X}(a<;k3>TC#");
      String string0 = formatter0.format((-1), "", "0");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(0, "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForDate("2t");
      MockDate mockDate0 = new MockDate(1, 0, 732, 0, 1);
      String string0 = formatter0.format((Date) mockDate0, "");
      assertEquals("0000-00-00 00:00", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Double) null, "");
      assertEquals("N/A", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForFloat("io.netty.handler.ssl.Java9SslEngine$AlpnSelector");
      String string0 = formatter0.format((-2040.344275492127));
      assertEquals("000000002040", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForNull("");
      String string0 = formatter0.format((Date) null, (String) null, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForDate((String) null);
      Instant instant0 = MockInstant.ofEpochSecond(296L, 1651L);
      Date date0 = Date.from(instant0);
      String string0 = formatter0.format(date0, "h$ g%A");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForNull("");
      String string0 = formatter0.format((Date) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForNull("");
      String string0 = formatter0.format((Date) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForNull("");
      String string0 = formatter0.format((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForLong("");
      Long long0 = new Long((-218015871));
      String string0 = formatter0.format(long0, "-218,015,871");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForInteger((String) null);
      Integer integer0 = new Integer(760);
      String string0 = formatter0.format(integer0, "com.adapterj.text.Formatter");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForFloat("");
      String string0 = formatter0.format((Float) null, "0", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForFloat("");
      String string0 = formatter0.format((Float) null, "-1298");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForFloat("");
      String string0 = formatter0.format((Float) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForDouble("");
      String string0 = formatter0.format((Double) null, "5!Em,/15Vi%9jEHODT");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForNull("");
      String string0 = formatter0.format((Boolean) null, (Boolean) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForLong("");
      String string0 = formatter0.format((long) (-218015871), "-218,015,871", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForLong("");
      String string0 = formatter0.format(0L, "*NU;e6+,.;TQ@q");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForLong((String) null);
      formatter0.setPatternForLong("Pi}\"9JR[;[B,");
      String string0 = formatter0.format(0L);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForLong("");
      formatter0.setPatternForLong("plB,M\"N1 v&");
      String string0 = formatter0.format((long) (-304));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForInteger((String) null);
      String string0 = formatter0.format((-1), "DFBTs}&R!FrTh,9");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForFloat("");
      String string0 = formatter0.format((float) 1, "*J:3'LW8");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForDouble((String) null);
      String string0 = formatter0.format((double) (-1), " cS;)Ae%0u i^1B<k");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      // Undeclared exception!
      try { 
        formatter0.format(false, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.adapterj.text.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Float float0 = new Float(1.0F);
      Float.isFinite(1.0F);
      formatter0.setPatternForFloat((String) null);
      Float.min(1.0F, 1.0F);
      String string0 = formatter0.format((-1), "6RWI^SHe");
      assertEquals("-6RWI^SHe1", string0);
      
      Float.max(0.0F, 0.0F);
      formatter0.format(float0);
      formatter0.format(float0);
      Long long0 = new Long(838L);
      String string1 = formatter0.format(long0, "](]");
      assertEquals("](]838", string1);
      
      formatter0.setPlaceholderForLong("mZOTlZbP:P!C}Sw");
      String string2 = formatter0.format(570);
      assertEquals("570", string2);
      
      formatter0.setPatternForDouble("");
      formatter0.format("");
      formatter0.setPlaceholderForInteger("");
      String string3 = formatter0.format((Double) null, "", "1.00");
      assertEquals("1.00", string3);
      
      String string4 = formatter0.format((float) (-1), (String) null);
      assertEquals("-1.00", string4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Object) null);
      assertEquals("N/A", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Object) "0.00");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Boolean boolean0 = new Boolean(true);
      String string0 = formatter0.format(true, boolean0);
      assertEquals("TRUE", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Boolean boolean0 = new Boolean("]g;p0~!A Y[daV$");
      String string0 = formatter0.format(false, boolean0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Boolean boolean0 = Boolean.valueOf("_&b(M`]p");
      // Undeclared exception!
      try { 
        formatter0.format(boolean0, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.adapterj.text.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Boolean) null);
      assertEquals("N/A", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Boolean boolean0 = Boolean.FALSE;
      String string0 = formatter0.format(boolean0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format("8xaX)CIVj,=aPO=,", "io.netty.handler.ssl.Java9SslEngine$AlpnSelector");
      assertEquals("8xaX)CIVj,=aPO=,", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format("2\"+3;*");
      assertEquals("2\"+3;*", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((String) null);
      assertEquals("N/A", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((-487.445911268), "Gyd'ge$O>D!IB", "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForDouble("io.netty.handler.ssl.Java9SslEngine$AlpnSelector");
      String string0 = formatter0.format((-1.0), "", "#,##0.00");
      assertEquals("000000000001", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((double) 0.0F, "java.lang.String@0000000002", (String) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(1043.906844125, (String) null, (String) null);
      assertEquals("1,043.91", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Double) null, "O|oJ<27^", "-O|oJ<27^226");
      assertEquals("-O|oJ<27^226", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Double double0 = new Double((-0.24179999999978463));
      String string0 = formatter0.format(double0, "'", (String) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Double) null, "", "");
      assertEquals("N/A", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Double) null, (String) null, (String) null);
      assertEquals("N/A", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Double double0 = new Double(2570.0347409);
      String string0 = formatter0.format(double0, "", "1925-06-29 00:00");
      assertEquals("2,570.03", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Double) null, "79m{o_u~g5G}zy I;O", "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((-1289.1811673359002), "");
      assertEquals("-1,289.18", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(0.0, (String) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Double double0 = new Double((-882.41));
      String string0 = formatter0.format(double0, "");
      assertEquals("-882.41", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForDouble("io.netty.handler.ssl.Java9SslEngine$AlpnSelector");
      String string0 = formatter0.format(0.0);
      assertEquals("000000000000-- :", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((double) 0.0F);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(2279.2202752);
      assertEquals("2,279.22", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Double double0 = new Double(290.7581);
      formatter0.setPatternForFloat("com.adapterj.text.Formatter");
      String string0 = formatter0.format(double0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(0.0F, "NJIb5.bs(.g+(", "");
      assertEquals("0.00", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((-3444.6F), "*;O-DZ/R", (String) null);
      assertEquals("0.00", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((float) 3033L, "", "h.<H;E");
      assertEquals("3,033.00", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((float) (-670L), "%6Vi'n<8Pb6}a", "9U)641ee=hd\"B>=");
      assertEquals("9U)641ee=hd\"B>=", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(0.0F, (String) null, "Fx!_@Z");
      assertEquals("0.00", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Float) null, "", "G");
      assertEquals("G", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Float float0 = new Float((float) (-304));
      String string0 = formatter0.format(float0, "]g;p0~!A Y[daV$", "");
      assertEquals("0.00", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Float) null, (String) null, (String) null);
      assertEquals("0.00", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((-3444.6F), "");
      assertEquals("-3,444.60", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Float float0 = new Float(0.0F);
      String string0 = formatter0.format(float0, ";&WHY'tl+)");
      assertEquals("0.00", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Float float0 = new Float(0.0F);
      String string0 = formatter0.format(float0, (String) null);
      assertEquals("0.00", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForFloat("io.netty.handler.ssl.Java9SslEngine$AlpnSelector");
      String string0 = formatter0.format(112.0F);
      assertEquals("000000000112-- :", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Integer integer0 = new Integer((-180));
      Float float0 = new Float(0.0F);
      String string0 = formatter0.format(float0);
      assertEquals("0.00", string0);
      
      Integer.compare((-2370), (-197));
      Integer.max(438, (-2370));
      formatter0.format(integer0);
      String string1 = formatter0.format((-1758));
      assertEquals("-1,758", string1);
      
      formatter0.setPlaceholderForDate("ZiD");
      Float.min(438, 0.0F);
      formatter0.setPlaceholderForInteger("");
      formatter0.setPatternForLong("YLFBW5.{&-0& {4j$m");
      formatter0.setPatternForFloat("YLFBW5.{&-0& {4j$m");
      formatter0.setPatternForInteger("-1,758");
      String string2 = formatter0.format(integer0, "");
      assertEquals("", string2);
      
      formatter0.format(float0);
      formatter0.format((Date) null);
      formatter0.format(0.0F);
      String string3 = formatter0.format((float) 438);
      assertEquals("YLFBW5438.0{&-& {4j$m", string3);
      
      String string4 = formatter0.format((Double) null);
      assertEquals("N/A", string4);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((long) (-1564), "io.netty.handler.ssl.Java9SslEngine$AlpnSelector", "F[1~jj#`j]O");
      assertEquals("000000001564", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(0L, "io.netty.handler.ssl.Java9SslEngine$AlpnSelector", "");
      assertEquals("000000000000-- :", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(0L, (String) null, "F43V");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Long) null, "9U)641ee=hd\"B>=", (String) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Long) null, "", "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Long long0 = new Long((-3752L));
      String string0 = formatter0.format(long0, (String) null, "");
      assertEquals("-3752", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((-3031L), (String) null);
      assertEquals("-3031", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Long long0 = Long.getLong("9U)641ee=hd\"B>=", (-670L));
      String string0 = formatter0.format(long0, "");
      assertEquals("-670", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForLong("plB,M\"N1 v&");
      String string0 = formatter0.format((long) (-304));
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(0L);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForLong("f8f.W|{,^i4=jIt");
      String string0 = formatter0.format((Long) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Long long0 = Long.getLong("9U)641ee=hd\"B>=", (-670L));
      String string0 = formatter0.format(long0);
      assertEquals("-670", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((-218015871), "-218,015,871", "-218,015,871");
      assertEquals("-218,015,871", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(318, "2tcQ'D +", "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(0, "WlMj@@?U91z$y;33t:", (String) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(362178766, "", "191196283-06-12 09:34");
      assertEquals("362,178,766", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(1346, (String) null, "1,043.91");
      assertEquals("1,346", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Integer integer0 = new Integer(1);
      String string0 = formatter0.format(integer0, "io.netty.handler.ssl.Java9SslEngine$AlpnSelector", "");
      //  // Unstable assertion: assertEquals("000000000001-- :", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Integer integer0 = new Integer((-218015871));
      String string0 = formatter0.format(integer0, "-218,015,871", (String) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Integer integer0 = new Integer((-3));
      String string0 = formatter0.format(integer0, "io.netty.handler.ssl.Java9SslEngine$AlpnSelector", "0000-00-00 00:00");
      assertEquals("0000-00-00 00:00", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Integer integer0 = new Integer(0);
      String string0 = formatter0.format(integer0, "", "");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Integer integer0 = new Integer(929);
      String string0 = formatter0.format(integer0, (String) null, (String) null);
      assertEquals("929", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((-5768), (String) null);
      assertEquals("-5,768", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Integer integer0 = new Integer((-180));
      String string0 = formatter0.format(integer0, "");
      assertEquals("-180", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      Integer integer0 = new Integer((-4442));
      String string0 = formatter0.format(integer0, (String) null);
      assertEquals("-4,442", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForInteger("4H0M%T,d");
      String string0 = formatter0.format(0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForInteger("X}(a<;k3>TC#");
      String string0 = formatter0.format((Integer) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      MockDate mockDate0 = new MockDate((-1), 0, (-3792), (-3792), (-3792), (-1));
      String string0 = formatter0.format((Date) mockDate0, "Q2P&a", "0");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Date) null, "-c3^706219455", "");
      assertEquals("0000-00-00 00:00", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      MockDate mockDate0 = new MockDate(0L);
      String string0 = formatter0.format((Date) mockDate0, "zz7j", (String) null);
      assertEquals("0000-00-00 00:00", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Date) null, "", "");
      assertEquals("N/A", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format((Date) null, "1,346", "1,043.91");
      assertEquals("1,043.91", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      MockDate mockDate0 = new MockDate(362178766, 362178766, 362178766);
      String string0 = formatter0.format((Date) mockDate0, (String) null);
      assertEquals("191196283-06-12 09:34", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForDate("9;s>7oLvyxvq");
      MockDate mockDate0 = new MockDate();
      String string0 = formatter0.format((Date) mockDate0);
      assertEquals("0000-00-00 00:00", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForDouble((String) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForFloat("");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForLong("");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForLong((String) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForInteger("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForInteger((String) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForDate("");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPatternForDate((String) null);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForNull("");
      String string0 = formatter0.format((Boolean) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      String string0 = formatter0.format(false);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForInteger("");
      String string0 = formatter0.format(613566757, "79m{o_u~g5G}zy I;O");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForEmpty("18446744073709550946");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Formatter formatter0 = new Formatter();
      formatter0.setPlaceholderForDouble("");
      String string0 = formatter0.format(323.2499362445092, "?}+!TQ,XlIvzd'o");
      assertEquals("", string0);
  }
}

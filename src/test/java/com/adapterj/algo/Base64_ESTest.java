/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 27 16:04:34 GMT 2019
 */

package com.adapterj.algo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.adapterj.algo.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64.decode("AMA2SYg[#M44P(-4qL", 1937);
      // Undeclared exception!
      try { 
        Base64.decode((String) null, (-1875));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.adapterj.algo.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeToString((byte[]) null, 207);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.adapterj.algo.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      Base64.encodeToString(byteArray0, (byte)125);
      Base64.decode("ffyjAAAAwQ\r\n", 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("", (-3485));
      Base64.encodeToString(byteArray0, (-560));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)112;
      byteArray1[4] = (byte) (-6);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-125);
      byteArray1[7] = (byte) (-96);
      Base64.encodeToString(byteArray1, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)102;
      Base64.encodeToString(byteArray0, (byte)100);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "5v=;.d$:Df#3`K";
      int int0 = 0;
      // Undeclared exception!
      try { 
        Base64.decode("5v=;.d$:Df#3`K", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad base-64
         //
         verifyException("com.adapterj.algo.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("6%WT)|A:07}", 1687);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)100, (byte) (-64), (byte) (-45)}, byteArray0);
      
      String string0 = Base64.encodeToString(byteArray0, 0);
      assertNotNull(string0);
      assertEquals("6WTA0w==\n", string0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)100, (byte) (-64), (byte) (-45)}, byteArray0);
      
      String string1 = Base64.encodeToString(byteArray0, 5425);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6WTA0w\n", string1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)100, (byte) (-64), (byte) (-45)}, byteArray0);
      
      String string2 = Base64.encodeToString(byteArray0, 150);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6WTA0w==", string2);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)100, (byte) (-64), (byte) (-45)}, byteArray0);
      
      byte[] byteArray1 = Base64.decode("6WTA0w==\n", 1687);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-23), (byte)100, (byte) (-64), (byte) (-45)}, byteArray1);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-48);
      byteArray2[1] = (byte) (-126);
      String string3 = Base64.encodeToString(byteArray2, 0);
      assertNotNull(string3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0II=\n", string3);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-126)}, byteArray2);
      
      byte[] byteArray3 = Base64.decode("", (byte) (-126));
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray3);
      
      String string4 = Base64.encodeToString(byteArray3, 1687);
      assertNotNull(string4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      byte[] byteArray4 = Base64.decode("6WTA0w==\n", 5425);
      assertNotNull(byteArray4);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte) (-23), (byte)100, (byte) (-64), (byte) (-45)}, byteArray4);
      
      String string5 = Base64.encodeToString(byteArray0, 0);
      assertNotNull(string5);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("6WTA0w==\n", string5);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)100, (byte) (-64), (byte) (-45)}, byteArray0);
      
      String string6 = Base64.encodeToString(byteArray2, (byte) (-48));
      assertNotNull(string6);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("0II=\n", string6);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-126)}, byteArray2);
      
      String string7 = Base64.encodeToString(byteArray2, 150);
      assertNotNull(string7);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("0II=", string7);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-126)}, byteArray2);
      
      String string8 = Base64.encodeToString(byteArray3, (byte) (-126));
      assertNotNull(string8);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertEquals("", string8);
      assertArrayEquals(new byte[] {}, byteArray3);
      
      byte[] byteArray5 = Base64.decode("773WfV^{ZW|M}@5SiDF", 0);
      assertNotNull(byteArray5);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray0);
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-67), (byte) (-42), (byte)125, (byte)86, (byte)86, (byte)51, (byte) (-108), (byte) (-94), (byte)12}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-40);
      String string0 = Base64.encodeToString(byteArray0, (byte) (-1));
      assertNotNull(string0);
      assertEquals("nv87FtgA", string0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-1), (byte)59, (byte)22, (byte) (-40), (byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.decode("%Cu<,Eh:", (byte) (-98));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)10, (byte) (-31), (byte)33}, byteArray1);
      
      String string1 = "4=KAI;vU:\",x*'";
      // Undeclared exception!
      try { 
        Base64.decode("4=KAI;vU:\",x*'", (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad base-64
         //
         verifyException("com.adapterj.algo.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      String string0 = Base64.encodeToString(byteArray0, (byte)0);
      assertNotNull(string0);
      assertEquals("AK0A\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte)0}, byteArray0);
      
      String string1 = Base64.encodeToString(byteArray0, (byte)0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("AK0A\n", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte)0}, byteArray0);
      
      byte[] byteArray1 = Base64.decode("AK0A\n", (byte)0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte)0}, byteArray1);
      
      String string2 = Base64.encodeToString(byteArray0, (byte)0);
      assertNotNull(string2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("AK0A\n", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte)0}, byteArray0);
      
      String string3 = Base64.encodeToString(byteArray1, (byte)0);
      assertNotNull(string3);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("AK0A\n", string3);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte)0}, byteArray1);
      
      String string4 = Base64.encodeToString(byteArray1, (byte) (-83));
      assertNotNull(string4);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("AK0A\r\n", string4);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte)0}, byteArray1);
      
      byte[] byteArray2 = Base64.decode("AK0A\n", 760);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte)0}, byteArray2);
      
      byte[] byteArray3 = new byte[2];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte) (-83);
      byteArray3[1] = (byte) (-83);
      String string5 = Base64.encodeToString(byteArray3, 2185);
      assertNotNull(string5);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("ra0\n", string5);
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-83)}, byteArray3);
      
      byte[] byteArray4 = Base64.decode("com.adapterj.algo.Base64$Encoder", (byte) (-83));
      assertNotNull(byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      String string6 = Base64.encodeToString(byteArray3, (byte)0);
      assertNotNull(string6);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals("ra0=\n", string6);
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-83)}, byteArray3);
      
      // Undeclared exception!
      try { 
        Base64.decode("=rI V1T~hJ<f(Oa*", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad base-64
         //
         verifyException("com.adapterj.algo.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode("O-K.v=!U6Lm6", 1505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad base-64
         //
         verifyException("com.adapterj.algo.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)16;
      Base64.encodeToString(byteArray0, (-5140));
      Base64.decode("_d4AVhA=\r\n", (byte) (-3));
      Base64.decode("US-ASCII", 0);
      Base64.encodeToString(byteArray0, (byte)86);
      Base64.decode("com.adapterj.algo.Base64$Encoder", (byte)86);
      // Undeclared exception!
      try { 
        Base64.decode("_d4AVhA=\r\n", (-2251));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad base-64
         //
         verifyException("com.adapterj.algo.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode(";G,9u5N", 2171);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad base-64
         //
         verifyException("com.adapterj.algo.Base64", e);
      }
  }
}
